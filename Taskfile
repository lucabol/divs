#!/bin/bash

# Used in multiple function - there should be a better way
MSHEADERS='Tik,Name,Industry,Yld,YldB,M,T,A,R,U,PFV,PEF,PC'

function clean {    # Remove csv files
    trash *.csv
}

function build {    # Grab csv files and build projections 
    if [ "$#" -ne 1 ]; then
      echo "Pass the number of morningstar export files to get from Downloads folder"
      exit -1
    fi

    local SDSRHEADERS='TikS,NameS,Sector,SubSect,MCap,Beta,Time,YldAvg,Val,YldS,PEB,PE5,Saf,GrL,Gr5,G20,GrS,UnS,Dat,Frq,Pay,DtC,DtE,PFCF,RD,RR,Sch,Tax'

    # Copy from Download folder, need to pass the number of morningstar files to download
  	cp -f $(ls -rt /mnt/c/Users/lucabol/Downloads/Screener_*.csv     | tail -n $1 | paste -d ' ' -s) ./
    qsv cat rows -o ms.csv $(ls -rt Screener_*.csv | paste -d ' ' -s)
  	cp -f "$(ls -rt /mnt/c/Users/lucabol/Downloads/Screener\ *.csv | tail -n 1)" ./sds.csv

    # TODO: discover why csv files from windows shares are executable
    chmod a-x *.csv
    
    # Change headers to simpler ones
    <ms.csv qsv rename $MSHEADERS > msr.csv
    <sds.csv qsv rename $SDSRHEADERS > sdsr.csv

    # Join and fulljoin them in parallel
    qsv join --full 1 msr.csv 1 sdsr.csv > fulljoined.csv &
    qsv join 1 msr.csv 1 sdsr.csv        > joined.csv &
    wait

    # Calc very best ones
    <joined.csv qsv search -s M Wide | qsv search -s Saf '^[9|8].*' > best.csv

    <joined.csv qsv search -s M Wide | qsv join --left-anti 1 - 1 best.csv         > widejoined.csv &
    <joined.csv qsv search -s M Narrow | qsv search -s Saf '^[9|8].*'              > narrowjoined.csv &
    <msr.csv qsv search -s M Wide | qsv join --left-anti 1 - 1 joined.csv          > justwide.csv &
    <sdsr.csv qsv search -s Saf '^[9|8].*' | qsv join --left-anti 1 - 1 joined.csv > justverysafe.csv &
    <sdsr.csv qsv join --left-anti 1 - 1 joined.csv                                > justsafe.csv &
    wait
}

function show {
    echo
    echo $2
    echo "----------------"
    echo
    <$1 qsv select $3 |
    insert_codes |
    qsv sort -s $4 -R -N |
    csvlook --max-column-width $COLWIDTH
}

function insert_codes {
  body sed 's/Wide/Wd/g;s/Narrow/Nr/g;s/Foreign/F/g;s/Qualified/Q/g;s/Canadian/C/g;s/Stable/=/g;s/Negative/-/g;s/Positive/+/g;s/Standard/=/g;s/Exemplary/+/g;s/Medium/=/g;s/Low/+/g;s/High/-/g' 
}

# Either the target exist and it is newer than yesterday or execute the first dependency
function exit_if_old {
  [ -n "$(find ms.csv -newermt 'yesterday' 2>/dev/null)" ] || { echo "Old files, build first"; exit 1; }
}

function table {    # Print table of stocks
    exit_if_old

    local MIXHEADERS='Tik,Name,Sector,M,T,A,Saf,R,U,YldS,Val,GrL,Gr5,G20,GrS,UnS'
    local SDSHEADERS='TikS,NameS,Sector,Saf,YldS,Val,GrL,Gr5,G20,GrS,UnS'
    local MIXSEL='R,YldS'
    local MSSEL='R,Yld'
    local SDSSEL='YldS'

    local COLWIDTH=20
  
    show best.csv 'VERY SAFE - WIDE' $MIXHEADERS $MIXSEL
    show narrowjoined.csv 'VERY SAFE - NARROW' $MIXHEADERS $MIXSEL
    show widejoined.csv 'SAFE - WIDE' $MIXHEADERS $MIXSEL
    show justwide.csv 'JUST WIDE' $MSHEADERS $MSSEL
    show justverysafe.csv 'JUST VERY SAFE' $SDSHEADERS $SDSSEL
}

function chart {  # Print chart of stocks
    exit_if_old

    gnuplot gnuscript
}

function help {     # Prints help
    echo "Usage: $0 <task> <args>"
    echo "Execute a task with the specified arguments."
    echo "By adding 'alias run=./Taskfile' you can then call it as 'run <task> <args>"
    echo
    echo "Tasks:"
    grep '^function .* #.* ' Taskfile | # Start with function and has # somewhere
      cut -d' ' -f 2- |                 # Remove the word 'function'
      tr -d '{' |                       # Remove '{}'
      sed 's/^/  /g' |                  # Indent by two spaces
      column --table --separator '#'    # column it using # as the separator
}

${@:-help}
