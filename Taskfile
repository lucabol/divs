#!/bin/bash

function clean {    # Remove csv files
    trash *.csv
}

function legend {   # Display legend for tables
cat << EOF
Morningstar
  Ticker          Tik
  Name            Name
  Industry        Industry
  Yield Fwd       Yld
  Yield Trailing  YldB
  Economic Moat   M
  Cap Alloc       A
  MS Rating       R
  Fair Value Unc  U
  Price/Fair V    PFV
  Price/Earn      PEF
  Price/CashFl    PC

SDS
  Ticker          TikS
  Name            NameS
  Sector          Sector
  Sub-Sector      SubSect
  Market Cap      MCap
  Beta            Beta
  Timeliness      Time
  5-year avg Yld  YldAvg
  % Abv 5Yr Yld   Val
  Dividend Yld    YldS
  P/E Ratio       PEB
  P/E 5-year      PE5
  Safety          Saf
  Div Gr Latest   GrL
  Div Gr 5yr      Gr5
  Div Gr 20yr     Gr20
  Div Gr Streak   GrS
  Unint Div Str   GrU
  Ex Div Date     Dat
  Div Freq        Frq
  Payout Ratio    Pay
  Net Debt/Cap Rt DtC
  Net Dbt/EBITDA  DtE
  Yrs + FCF of 10 PFCF
  Recessin div    RD
  Recession Ret   RR
  Paym Schedule   Sch
  Taxation        Tax

EOF
}

# Used in multiple function - there should be a better way
MSHEADERS='Tik,Name,SectorM,Industry,Yld,YldB,M,A,R,U,PFV,PEF,PC'

function build {    # Grab csv files and build projections 
    if [ "$#" -ne 1 ]; then
      echo "Pass the number of morningstar export files to get from Downloads folder"
      exit -1
    fi
    clean

    local SDSRHEADERS='TikS,NameS,Sector,SubSect,MCap,Beta,Time,YldAvg,Val,YldS,PEB,PE5,Saf,GrL,Gr5,G20,GrS,UnS,Dat,Frq,Pay,DtC,DtE,PFCF,RD,RR,Sch,Tax'

    # Copy from Download folder, need to pass the number of morningstar files to download
  	cp -f $(ls -rt /mnt/c/Users/lucabol/Downloads/Screener_*.csv     | tail -n $1 | paste -d ' ' -s) ./
    qsv cat rows -o ms.csv $(ls -rt Screener_*.csv | paste -d ' ' -s)
  	cp -f "$(ls -rt /mnt/c/Users/lucabol/Downloads/Screener\ *.csv | tail -n 1)" ./sds.csv

    # TODO: discover why csv files from windows shares are executable
    chmod a-x *.csv
    
    # Change headers to simpler ones
    <ms.csv qsv rename $MSHEADERS > msr.csv
    <sds.csv qsv rename $SDSRHEADERS > sdsr.csv

    # Both M* and SDS
    qsv join 1 msr.csv 1 sdsr.csv        > joined.csv &

    # Only M* and only SDS
    qsv join --left-anti 1 msr.csv 1 sdsr.csv > msronly.csv
    qsv join --left-anti 1 sdsr.csv 1 msr.csv > sdsonly.csv

    wait

    # Calc very best ones
    <joined.csv qsv search -s M Wide | qsv search -s Saf '^[9|8].*' > best.csv

    # Format multiple tables to display in order of safety
    <joined.csv qsv search -s M Wide | qsv join --left-anti 1 - 1 best.csv         > widejoined.csv &
    <joined.csv qsv search -s M Narrow | qsv search -s Saf '^[9|8].*'              > narrowjoined.csv &
    <msr.csv qsv search -s M Wide | qsv join --left-anti 1 - 1 joined.csv          > justwide.csv &
    <sdsr.csv qsv search -s Saf '^[9|8].*' | qsv join --left-anti 1 - 1 joined.csv > justverysafe.csv &
    <sdsr.csv qsv join --left-anti 1 - 1 joined.csv                                > justsafe.csv &
    <msr.csv qsv search -s M Narrow | qsv search -s R '[5|4]' | qsv join --left-anti 1 - 1 joined.csv        > unsafenarrow.csv &
    wait
}

function show {
    echo
    echo $2
    echo "------------------------------"
    echo
    <$1 qsv select $3 |
    insert_codes |
    qsv sort -s $4 -R -N |
    csvlook --max-column-width $COLWIDTH
    # The instruction below doesn't align correctly numbers (right) vs strings (left)
    #qsv table -c $COLWIDTH -a right
}

function insert_codes {
  body sed 's/Wide/Wd/g;s/Narrow/Nr/g;s/Foreign/F/g;s/Qualified/Q/g;s/Canadian/C/g;s/Stable/=/g;s/Negative/-/g;s/Positive/+/g;s/Standard/=/g;s/Exemplary/+/g;s/Medium/=/g;s/Low/+/g;s/High/-/g' 
}

# Either the target exist and it is newer than yesterday or execute the first dependency
function exit_if_old {
  [ -n "$(find ms.csv -newermt 'yesterday' 2>/dev/null)" ] || { echo "Old files, build first"; exit 1; }
}

function table {    # Print table of stocks
    exit_if_old

    local MIXHEADERS='Tik,Name,Sector,M,A,Saf,R,U,YldS,Val,GrL,Gr5,G20,GrS,UnS'
    local SDSHEADERS='TikS,NameS,Sector,Saf,YldS,Val,GrL,Gr5,G20,GrS,UnS'
    local MIXSEL='R,YldS'
    local MSSEL='R,Yld'
    local SDSSEL='YldS'

    local COLWIDTH=15
  
    show best.csv 'VERY SAFE WITH WIDE MOAT' $MIXHEADERS $MIXSEL
    show narrowjoined.csv 'VERY SAFE WITH NARROW MOAT' $MIXHEADERS $MIXSEL
    show widejoined.csv 'SAFE WITH WIDE MOAT' $MIXHEADERS $MIXSEL
    show justwide.csv 'UNSAFE WITH WIDE MOAT' $MSHEADERS $MSSEL
    show justverysafe.csv 'VERY SAFE WIHOUT MOAT' $SDSHEADERS $SDSSEL
    show unsafenarrow.csv 'UNSAFE WITH NARROW MOAT CHEAP' $MSHEADERS $MSSEL
}

function chart {  # Print chart of stocks
    exit_if_old

    gnuplot gnuscript
}

function help {     # Prints help
    echo "Usage: $0 <task> <args>"
    echo "Execute a task with the specified arguments."
    echo "By adding 'alias run=./Taskfile' you can then call it as 'run <task> <args>"
    echo
    echo "Tasks:"
    grep '^function .* #.* ' Taskfile | # Start with function and has # somewhere
      cut -d' ' -f 2- |                 # Remove the word 'function'
      tr -d '{' |                       # Remove '{}'
      sed 's/^/  /g' |                  # Indent by two spaces
      column --table --separator '#'    # column it using # as the separator
}

${@:-help}
